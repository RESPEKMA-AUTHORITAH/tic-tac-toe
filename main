import numpy as np

class TicTacToe4x4:
    def __init__(self):
        self.board = np.full((4, 4), ' ')
        self.current_player = 'X'
    
    def print_board(self):
        print("    0   1   2   3 ")
        print("  +---+---+---+---+")
        for row in range(4):
            row_str = f"{row} |"
            for col in range(4):
                row_str += f" {self.board[row, col]} |"
            print(row_str)
            print("  +---+---+---+---+")
    
    def is_valid_move(self, row, col):
        return 0 <= row < 4 and 0 <= col < 4 and self.board[row, col] == ' '
    
    def make_move(self, row, col):
        if self.is_valid_move(row, col):
            self.board[row, col] = self.current_player
            return True
        return False
    
    def check_winner(self):
        lines = []

        # Rows and columns
        for i in range(4):
            lines.append(self.board[i, :])  # Row
            lines.append(self.board[:, i])  # Column

        # Diagonals
        lines.append(self.board.diagonal())
        lines.append(np.fliplr(self.board).diagonal())

        # Check if there's a winner
        for line in lines:
            if np.all(line == 'X'):
                return 'X'
            if np.all(line == 'O'):
                return 'O'
        return None
    
    def switch_player(self):
        self.current_player = 'O' if self.current_player == 'X' else 'X'
    
    def is_full(self):
        return not np.any(self.board == ' ')
    
    def play_game(self):
        print("Welcome to 4x4 Tic Tac Toe with a Twist!")
        print("Players take turns to place their mark (X or O) on the board.")
        print("The first player to get four in a row (horizontally, vertically, or diagonally) wins.")
        self.print_board()
        
        while True:
            try:
                print(f"\nPlayer {self.current_player}'s turn")
                row, col = map(int, input("Enter your move (row and column, separated by a space): ").split())
                if self.make_move(row, col):
                    self.print_board()
                    
                    winner = self.check_winner()
                    if winner:
                        print(f"\nCongratulations! Player {winner} wins!")
                        break
                    
                    if self.is_full():
                        print("\nThe game is a draw!")
                        break
                    
                    self.switch_player()
                else:
                    print("Invalid move. The cell is already occupied or out of bounds. Try again.")
            except ValueError:
                print("Invalid input. Please enter row and column numbers separated by a space.")

# To play the game
game = TicTacToe4x4()
game.play_game()
